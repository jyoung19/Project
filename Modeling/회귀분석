import os
os.chdir(r'사용할 파일 디렉토리')
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns

### 데이터 불러오기 및 전처리
data_normal = pd.read_excel('정규화한 데이터.xlsx')
data_raw = pd.read_excel('원데이터.xlsx')
gym = pd.read_excel('공공체육시설 수.xlsx')

gym['공체시설수'] = gym['공체시설수'].astype(float)
gym['정규화한 공체시설수'] = gym['공체시설수'].copy()
for i in range(len(gym)):
  gym['정규화한 공체시설수'][i] = float((gym['공체시설수'][i]-min(gym['공체시설수']))/(max(gym['공체시설수'])-min(gym['공체시설수'])))
gym_normal = gym[['지역', '정규화한 공체시설수']]
gym_raw = gym[['지역', '공체시설수']]
y_normal = gym_normal[['정규화한 공체시설수']]

data_normal = data_normal.drop(['Unnamed: 0'], axis = 1)
data_raw = data_raw.drop(['Unnamed: 0'], axis = 1)
list = data_normal.columns
X_normal = data_normal[list[:-1]]

### heatmap 그려 변수 간 공선성 확인
corr = X_normal.corr()
sns.heatmap(corr[(corr >= 0.7) | (corr <= -0.7)], 
            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,
            annot=True, annot_kws={"size": 8}, square=True);
# 그 결과 정규화한 자가용 수, 대졸비율, 공무원 수, 재정수입 변수 제거

### 남은 변수로 후진제거법 회귀분석 진행(유의수준 5% 하에서)
X_data = X_normal[['정규화한 면적', '정규화한 수급인구비율', '정규화한 인구수', '정규화한 재산세', '정규화한 총사업체수', '정규화한 투표율', '정규화한 행정동 수']]

variables = X_data.columns.tolist()
selected_variables = variables
sl_remove = 0.05
 
sv_per_step = []
adjusted_r_squared = []
steps = []
step = 0
while len(selected_variables) > 0:
    X = sm.add_constant(X_data[selected_variables])
    p_vals = sm.OLS(y_normal,X).fit().pvalues[1:]
    max_pval = p_vals.max()
    if max_pval >= sl_remove:
        remove_variable = p_vals.idxmax()
        selected_variables.remove(remove_variable)
 
        step += 1
        steps.append(step)
        adj_r_squared = sm.OLS(y_normal,sm.add_constant(X_data[selected_variables])).fit().rsquared_adj
        adjusted_r_squared.append(adj_r_squared)
        sv_per_step.append(selected_variables.copy())
    else:
        break
# 선택된 변수들과 Adjusted R-squared plotting        
fig = plt.figure(figsize = (10, 10))
fig.set_facecolor('white')

font_size = 15
plt.xticks(steps, [f'step {s}\n'+'\n'.join(sv_per_step[i]) for i, s in enumerate(steps)], fontsize = 12)
plt.plot(steps, adjusted_r_squared, marker = 'o')
plt.ylabel("Adjusted R Squared", fontsize = font_size)
plt.grid(True)
plt.show()        
